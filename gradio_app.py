import gradio as gr
from PIL import Image
import numpy as np
import cv2
import os
import datetime
from imgcraft import Editor

# ===================================================================
# C·∫§U H√åNH V√Ä KH·ªûI T·∫†O
# ===================================================================
# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c l∆∞u tr·ªØ tr√™n Google Drive
GALLERY_PATH = "/content/drive/MyDrive/ImgCraft_Gallery"

print("Initializing Gradio App...")
# T·∫°o m·ªôt instance Editor "r·ªóng". C√°c m√¥ h√¨nh s·∫Ω ƒë∆∞·ª£c t·∫£i trong h√†m process.
comfyui_editor = Editor()
print("ComfyUI Editor is ready.")
# ƒê·∫£m b·∫£o th∆∞ m·ª•c gallery t·ªìn t·∫°i
os.makedirs(GALLERY_PATH, exist_ok=True)


# ===================================================================
# C√ÅC H√ÄM X·ª¨ L√ù ·∫¢NH (Kh√¥ng thay ƒë·ªïi)
# ===================================================================
def resize_image(image_pil, target_width, target_height):
    original_width, original_height = image_pil.size
    width_ratio = target_width / original_width
    height_ratio = target_height / original_height
    ratio = min(width_ratio, height_ratio)
    new_width = int(original_width * ratio)
    new_height = int(original_height * ratio)
    return image_pil.resize((new_width, new_height), Image.Resampling.LANCZOS)

def align_images(img_edited_pil, img_original_pil):
    img_edited = cv2.cvtColor(np.array(img_edited_pil), cv2.COLOR_RGB2BGR)
    img_original = cv2.cvtColor(np.array(img_original_pil), cv2.COLOR_RGB2BGR)
    gray_edited = cv2.cvtColor(img_edited, cv2.COLOR_BGR2GRAY)
    gray_original = cv2.cvtColor(img_original, cv2.COLOR_BGR2GRAY)
    
    try:
        detector = cv2.AKAZE_create()
        kpts1, descs1 = detector.detectAndCompute(gray_edited, None)
        kpts2, descs2 = detector.detectAndCompute(gray_original, None)
        if descs1 is None or descs2 is None or len(descs1) < 4 or len(descs2) < 4:
             raise ValueError("Not enough keypoints for coarse alignment.")
        matcher = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
        matches = sorted(matcher.match(descs1, descs2), key=lambda x: x.distance)
        if len(matches) < 4:
            raise ValueError("Not enough matches for homography.")
        src_pts = np.float32([kpts1[m.queryIdx].pt for m in matches]).reshape(-1, 1, 2)
        dst_pts = np.float32([kpts2[m.trainIdx].pt for m in matches]).reshape(-1, 1, 2)
        H_coarse, _ = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
        if H_coarse is None:
            raise ValueError("findHomography failed.")
    except Exception as e:
        print(f"Coarse alignment failed: {e}. Returning unaligned image.")
        return img_edited_pil

    h_orig, w_orig = img_original.shape[:2]
    aligned_cv = cv2.warpPerspective(img_edited, H_coarse, (w_orig, h_orig))
    return Image.fromarray(cv2.cvtColor(aligned_cv, cv2.COLOR_BGR2RGB))

# ===================================================================
# H√ÄM QU·∫¢N L√ù TH∆Ø VI·ªÜN
# ===================================================================
def get_gallery_pairs():
    """Qu√©t th∆∞ m·ª•c Drive v√† tr·∫£ v·ªÅ danh s√°ch c√°c c·∫∑p ·∫£nh."""
    pairs = {}
    if not os.path.exists(GALLERY_PATH):
        return []
    
    for filename in os.listdir(GALLERY_PATH):
        if filename.endswith((".png", ".jpg")):
            parts = filename.split('_')
            if len(parts) == 2:
                timestamp, ftype = parts[0], parts[1].split('.')[0]
                if timestamp not in pairs:
                    pairs[timestamp] = {}
                pairs[timestamp][ftype] = os.path.join(GALLERY_PATH, filename)

    # L·ªçc ra nh·ªØng c·∫∑p ƒë·∫ßy ƒë·ªß v√† s·∫Øp x·∫øp theo th·ª© t·ª± m·ªõi nh·∫•t
    full_pairs = [
        (pairs[ts]['original'], pairs[ts]['aligned'])
        for ts in sorted(pairs.keys(), reverse=True)
        if 'original' in pairs[ts] and 'aligned' in pairs[ts]
    ]
    return full_pairs

def delete_pair(original_path):
    """X√≥a m·ªôt c·∫∑p ·∫£nh d·ª±a tr√™n ƒë∆∞·ªùng d·∫´n c·ªßa ·∫£nh g·ªëc."""
    try:
        aligned_path = original_path.replace("_original.png", "_aligned.png")
        if os.path.exists(original_path):
            os.remove(original_path)
        if os.path.exists(aligned_path):
            os.remove(aligned_path)
        gr.Info(f"ƒê√£ x√≥a c·∫∑p ·∫£nh!")
    except Exception as e:
        gr.Warning(f"L·ªói khi x√≥a ·∫£nh: {e}")
    return refresh_gallery() # T·∫£i l·∫°i th∆∞ vi·ªán sau khi x√≥a

# ===================================================================
# H√ÄM CH√çNH CHO GRADIO
# ===================================================================
def process_and_align_and_save(image_np, target_width, target_height, progress=gr.Progress()):
    # 1. Resize ·∫£nh g·ªëc
    progress(0, desc="B∆∞·ªõc 1/4: ƒêang thay ƒë·ªïi k√≠ch th∆∞·ªõc ·∫£nh g·ªëc...")
    original_pil = Image.fromarray(image_np)
    resized_original_pil = resize_image(original_pil, target_width, target_height)

    # 2. X·ª≠ l√Ω qua ComfyUI
    progress(0.2, desc="B∆∞·ªõc 2/4: ƒêang x·ª≠ l√Ω ·∫£nh qua ComfyUI...")
    processed_pil = comfyui_editor.process(resized_original_pil)

    # 3. Kh·ªõp ·∫£nh
    progress(0.8, desc="B∆∞·ªõc 3/4: ƒêang kh·ªõp ·∫£nh k·∫øt qu·∫£...")
    aligned_pil = align_images(processed_pil, resized_original_pil)

    # 4. L∆∞u v√†o Google Drive
    progress(0.9, desc="B∆∞·ªõc 4/4: ƒêang l∆∞u v√†o Google Drive...")
    try:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        original_save_path = os.path.join(GALLERY_PATH, f"{timestamp}_original.png")
        aligned_save_path = os.path.join(GALLERY_PATH, f"{timestamp}_aligned.png")
        
        resized_original_pil.save(original_save_path)
        aligned_pil.save(aligned_save_path)
        gr.Info("C·∫∑p ·∫£nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o Google Drive!")
    except Exception as e:
        gr.Warning(f"L·ªói khi l∆∞u v√†o Google Drive: {e}")

    progress(1.0, desc="Ho√†n th√†nh!")
    return resized_original_pil, processed_pil, aligned_pil, aligned_pil

# ===================================================================
# H√ÄM X√ÇY D·ª∞NG GIAO DI·ªÜN TH∆Ø VI·ªÜN ƒê·ªòNG
# ===================================================================
def refresh_gallery():
    """T·∫°o l·∫°i giao di·ªán th∆∞ vi·ªán t·ª´ d·ªØ li·ªáu m·ªõi nh·∫•t tr√™n Drive."""
    pairs = get_gallery_pairs()
    # Tr·∫£ v·ªÅ m·ªôt component gr.Column ch·ª©a c√°c c·∫∑p ·∫£nh
    # ho·∫∑c m·ªôt th√¥ng b√°o n·∫øu th∆∞ vi·ªán tr·ªëng
    if not pairs:
        return gr.Column(visible=True, value=[gr.Markdown("*Th∆∞ vi·ªán ƒëang tr·ªëng. H√£y x·ª≠ l√Ω m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu!*")])

    # T·∫°o m·ªôt danh s√°ch c√°c component ƒë·ªÉ hi·ªÉn th·ªã
    gallery_items = []
    for orig_path, aligned_path in pairs:
        with gr.Blocks() as item_block: # D√πng Blocks ƒë·ªÉ nh√≥m c√°c component
            with gr.Row(variant="panel"):
                gr.Image(orig_path, label="G·ªëc (ƒë√£ resize)", height=256)
                gr.Image(aligned_path, label="ƒê√£ kh·ªõp", height=256)
                with gr.Column(min_width=100):
                    filename = os.path.basename(orig_path).replace("_original.png", "")
                    gr.Markdown(f"**ID:**\n`{filename}`")
                    delete_button = gr.Button("üóëÔ∏è X√≥a", variant="stop")
        
        # Li√™n k·∫øt s·ª± ki·ªán click c·ªßa n√∫t x√≥a v·ªõi h√†m delete_pair
        # D√πng lambda ƒë·ªÉ truy·ªÅn ƒë∆∞·ªùng d·∫´n v√†o h√†m
        delete_button.click(
            fn=lambda p=orig_path: delete_pair(p),
            inputs=None,
            outputs=gallery_container # N√∫t x√≥a s·∫Ω k√≠ch ho·∫°t vi·ªác l√†m m·ªõi to√†n b·ªô th∆∞ vi·ªán
        )
        gallery_items.append(item_block)
        
    return gr.Column(visible=True, value=gallery_items)


# ===================================================================
# X√ÇY D·ª∞NG GIAO DI·ªÜN GRADIO CH√çNH
# ===================================================================
with gr.Blocks(theme=gr.themes.Soft(), css=".gradio-container {max-width: 90% !important;}") as demo:
    gr.Markdown("# üé® Quy tr√¨nh X·ª≠ l√Ω & Kh·ªõp ·∫£nh T·ª± ƒë·ªông (v·ªõi Google Drive)")
    
    with gr.Tabs():
        with gr.TabItem("‚öôÔ∏è X·ª≠ l√Ω ·∫¢nh"):
            with gr.Row():
                with gr.Column(scale=1):
                    input_image = gr.Image(type="numpy", label="1. T·∫£i l√™n ·∫¢nh G·ªëc")
                    with gr.Accordion("T√πy ch·ªçn K√≠ch th∆∞·ªõc", open=True):
                        target_width = gr.Number(label="Chi·ªÅu r·ªông T·ªëi ƒëa (pixel)", value=896)
                        target_height = gr.Number(label="Chi·ªÅu cao T·ªëi ƒëa (pixel)", value=1344)
                    run_button = gr.Button("üöÄ B·∫Øt ƒë·∫ßu X·ª≠ l√Ω & Kh·ªõp ·∫£nh", variant="primary")
                with gr.Column(scale=3):
                    gr.Markdown("### K·∫øt qu·∫£ X·ª≠ l√Ω G·∫ßn nh·∫•t")
                    with gr.Tabs():
                        with gr.TabItem("So s√°nh Tr∆∞·ªõc & Sau"):
                            with gr.Row():
                                output_original_resized = gr.Image(label="·∫¢nh G·ªëc (ƒë√£ resize)", interactive=False)
                                output_aligned = gr.Image(label="·∫¢nh Cu·ªëi c√πng (ƒë√£ kh·ªõp)", interactive=False)
                        with gr.TabItem("C√°c b∆∞·ªõc Trung gian"):
                            with gr.Row():
                                output_processed = gr.Image(label="·∫¢nh sau khi qua ComfyUI (ch∆∞a kh·ªõp)", interactive=False)
                                output_aligned_2 = gr.Image(label="·∫¢nh Cu·ªëi c√πng (ƒë√£ kh·ªõp)", interactive=False)
        
        with gr.TabItem("üñºÔ∏è Th∆∞ vi·ªán ·∫¢nh (Gallery)"):
            gr.Markdown("Xem l·∫°i c√°c c·∫∑p ·∫£nh ƒë√£ x·ª≠ l√Ω ƒë∆∞·ª£c l∆∞u tr√™n Google Drive c·ªßa b·∫°n.")
            refresh_button = gr.Button("üîÑ T·∫£i l·∫°i Th∆∞ vi·ªán")
            gallery_container = gr.Column() # V√πng ch·ª©a ƒë·ªông cho th∆∞ vi·ªán
    
    # === ƒê·ªäNH NGHƒ®A C√ÅC S·ª∞ KI·ªÜN ===
    
    # 1. Khi nh·∫•n n√∫t x·ª≠ l√Ω
    run_button.click(
        fn=process_and_align_and_save,
        inputs=[input_image, target_width, target_height],
        outputs=[output_original_resized, output_processed, output_aligned, output_aligned_2]
    ).then( # Sau khi x·ª≠ l√Ω xong, t·ª± ƒë·ªông l√†m m·ªõi th∆∞ vi·ªán
        fn=refresh_gallery,
        inputs=None,
        outputs=gallery_container
    )
    
    # 2. Khi nh·∫•n n√∫t t·∫£i l·∫°i th∆∞ vi·ªán
    refresh_button.click(
        fn=refresh_gallery,
        inputs=None,
        outputs=gallery_container
    )
    
    # 3. Khi ·ª©ng d·ª•ng t·∫£i l·∫ßn ƒë·∫ßu ti√™n, t·ª± ƒë·ªông t·∫£i th∆∞ vi·ªán
    demo.load(
        fn=refresh_gallery,
        inputs=None,
        outputs=gallery_container
    )

if __name__ == "__main__":
    demo.launch(debug=True, share=True)
